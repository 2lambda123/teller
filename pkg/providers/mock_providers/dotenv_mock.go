// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/dotenv.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDotEnvClient is a mock of DotEnvClient interface.
type MockDotEnvClient struct {
	ctrl     *gomock.Controller
	recorder *MockDotEnvClientMockRecorder
}

// MockDotEnvClientMockRecorder is the mock recorder for MockDotEnvClient.
type MockDotEnvClientMockRecorder struct {
	mock *MockDotEnvClient
}

// NewMockDotEnvClient creates a new mock instance.
func NewMockDotEnvClient(ctrl *gomock.Controller) *MockDotEnvClient {
	mock := &MockDotEnvClient{ctrl: ctrl}
	mock.recorder = &MockDotEnvClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDotEnvClient) EXPECT() *MockDotEnvClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockDotEnvClient) Read(p string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDotEnvClientMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDotEnvClient)(nil).Read), p)
}

// Write mocks base method.
func (m *MockDotEnvClient) Write(p string, kvs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p, kvs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockDotEnvClientMockRecorder) Write(p, kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDotEnvClient)(nil).Write), p, kvs)
}
